@model Cursos.Models.RegistroCapacitacion

@{
    ViewBag.Title = "Create";
}

<h3>Registro de capacitación</h3>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "formRegistroCapacitacion", name = "formRegistroCapacitacion" }))
{
    @Html.AntiForgeryToken()

    <div class="form-inline">

        <div class="form-group">
            <div class="col-md-5">
                @Html.Label("Nombre: ")
            </div>
            <div class="col-md-10">
                @ViewBag.Capacitado.Nombre @ViewBag.Capacitado.Apellido
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-5">
                @Html.Label("Documento:")
            </div>
            <div class="col-md-10">
                @ViewBag.Capacitado.DocumentoCompleto
            </div>
        </div>

    </div>

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.JornadaID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("JornadaID", null, "Seleccionar la jornada..." , htmlAttributes: new { @class = "form-control", @onchange = "cargarCuposDisponibles();cargarFechaVencimiento();" })
                @Html.ValidationMessageFor(model => model.JornadaID, "", new { @class = "text-danger" })
                <p id="pCantidadCuposDisponibles"></p>
            </div>
        </div>

        @Html.Hidden("CapacitadoID")

        <div class="form-group">
            @Html.LabelFor(model => model.FechaVencimiento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FechaVencimiento, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FechaVencimiento, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Estado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Estado, new { @class = "form-control", @id = "Estado" })
            </div>
        </div>

        @*Se inicializará como no visible porque el estado "Inscripto" será el primero en mostrarse *@
        <div class="form-group" style="display:none" id="SeccionNota">
            @Html.LabelFor(model => model.Nota, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nota, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nota, "", new { @class = "text-danger" })
            </div>
        </div>

        @*Se inicializará como no visible porque el estado "Inscripto" será el primero en mostrarse *@
        <div class="form-group" style="display:none" id="SeccionNotaPrevia">
            @Html.LabelFor(model => model.NotaPrevia, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NotaPrevia, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NotaPrevia, "", new { @class = "text-danger" })
            </div>
        </div>

        @*Se inicializará como no visible porque el estado "Inscripto" será el primero en mostrarse *@
        <div class="form-group" style="display:none" id="SeccionAprobado">
            @Html.LabelFor(model => model.Aprobado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Aprobado)
                    @Html.ValidationMessageFor(model => model.Aprobado, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" id="btnAceptar" value="Aceptar" class="btn btn-default btnAceptar" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
    $('.btnAceptar').on('click', function (e) {
        var jornadaId = $('#JornadaID').val();
        $.ajax({
            url: '/Jornadas/ObtenerDatosDisponibilidadCupos',
            type: "GET",
            dataType: "JSON",
            data: { JornadaId: jornadaId},
            success: function (datosDisponiblidadCupos)
            {
                if (datosDisponiblidadCupos.QuedanCuposDisponibles)
                {
                    $("#formRegistroCapacitacion")[0].submit();
                }
                else
                {
                    alert('Ya no quedan cupos disponibles. No es posible realizar la inscripción.');
                    cargarCuposDisponibles(); //se recargan los cupos disponibles para la jornada
                }
            }
        });
    });

    $(function () {
        $('#Estado').change(function () {
            var value = $(this).val();
            //el valor 0 corresponde a Inscripto
            if (value == 0) {
                $('#SeccionNota').hide();
                $('#SeccionNotaPrevia').hide();
                $('#SeccionAprobado').hide();
            } else {
                $('#SeccionNota').show();
                $('#SeccionNotaPrevia').show();
                $('#SeccionAprobado').show();
            }
        });
    })

    function cargarFechaVencimiento()
    {
        var jornadaId = $('#JornadaID').val();
        $.ajax({
            url: '/RegistrosCapacitacion/ObtenerFechaVencimiento',
            type: "GET",
            dataType: "JSON",
            data: { JornadaId: jornadaId},
            success: function (FechaVencimientoString)
                     {
                        if (FechaVencimientoString && FechaVencimientoString.length > 0) {
                            $('#FechaVencimiento').val(FechaVencimientoString);
                            $('#FechaVencimiento').prop('placeholder', '');
                        } else {
                            $('#FechaVencimiento').val('');
                            $('#FechaVencimiento').prop('placeholder', 'Sin vencimiento');
                        }
                     }
        });
    }

    function cargarCuposDisponibles()
    {
        var jornadaId = $('#JornadaID').val();

        if (jornadaId.length != 0) {
            $.ajax({
                url: '/Jornadas/ObtenerDatosDisponibilidadCupos',
                type: "GET",
                dataType: "JSON",
                data: { JornadaId: jornadaId },
                success: function (datosDisponiblidadCupos) {
                    $("#pCantidadCuposDisponibles").html(datosDisponiblidadCupos.LabelTotalCuposDisponibles);

                    if (datosDisponiblidadCupos.QuedanCuposDisponibles) {
                        //si quedan cupos disponibles, se habilita el botón "Aceptar"
                        $("#btnAceptar").prop('disabled', false);
                    }
                    else {
                        //sino quedan cupos disponibles, se inhabililta el botón "Aceptar"
                        $("#btnAceptar").prop('disabled', true);

                    }
                }
            });
        }
        else
        {
            $("#pCantidadCuposDisponibles").html('');
        }
    }

</script>
}
