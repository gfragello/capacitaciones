@model Cursos.Models.Capacitado

@{
    ViewBag.Title = "Create";
}

@using (Html.BeginForm("Create", "Capacitados", null, FormMethod.Post, new { enctype = "multipart/form-data", id = "formCapacitado", name = "formCapacitado" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Capacitado - Crear</h4>
        @if (ViewBag.JornadaId != null)
        {
            <div class="alert alert-info"><strong>Atención!</strong> @string.Format("Este capacitado se agregará a la jornada: {0}", ViewBag.JornadaIdentificacionCompleta)</div>
        }
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.Label(Resources.ViewCapacitadosCreate.ResourceManager.GetString("lblDocumento"), htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("TipoDocumentoID", null, htmlAttributes: new { @class = "form-control" })
                @Html.EditorFor(model => model.Documento, new { htmlAttributes = new { @class = "form-control", @onblur = "validarDocumentoRepetido();" } })
                @Html.ValidationMessageFor(model => model.Documento, "", new { @class = "text-danger" })
                <a href="#" id="DocumentoRepetido" style="display:none;">El documento ya está asignado a un Capacitado</a>
            </div>
        </div>

        <div class="form-group">
            @Html.Label(Resources.ViewCapacitadosCreate.ResourceManager.GetString("lblNombre"), htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label(Resources.ViewCapacitadosCreate.ResourceManager.GetString("lblApellido"), htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Apellido, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Apellido, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (!User.IsInRole("InscripcionesExternas"))
        {
            <div class="form-group">
                @Html.Label(Resources.ViewCapacitadosCreate.ResourceManager.GetString("lblFoto"), new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input type="file" id="Photo" name="upload" />
                </div>
            </div>
        }

        <div class="form-group">
            @Html.Label(Resources.ViewCapacitadosCreate.ResourceManager.GetString("lblFechaNacimiento"), new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Fecha, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Fecha, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label(Resources.ViewCapacitadosCreate.ResourceManager.GetString("lblTelefono"), new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- BLOQUE EMPRESA CORREGIDO -->
        <div class="form-group">
            @Html.Label(Resources.ViewCapacitadosCreate.ResourceManager.GetString("lblEmpresa"), new { @class = "control-label col-md-2" })
            @if (User.IsInRole("ConsultaEmpresa") && User.IsInRole("InscripcionesExternas"))
            {
                <div class="col-md-10">
                    <label class="control-label" style="text-align: left;">@ViewBag.EmpresaNombreFantasia</label>
                    <input type="hidden" id="EmpresaID" name="EmpresaID" value="@ViewBag.EmpresaID" />
                    @Html.ValidationMessageFor(model => model.EmpresaID, "", new { @class = "text-danger" })
                </div>
            }
            else
            {
                <div class="col-md-10 position-relative" style="max-width:500px;">
                    <input type="text" id="filtroEmpresa" class="form-control filtro-empresa-input"
                           autocomplete="off"
                           placeholder="Buscar empresa por nombre, RUT o razón social..." />
                    <input type="hidden" id="EmpresaID" name="EmpresaID" />
                    <div id="sugerencias-empresas" class="list-group sugerencias-empresas-dropdown"
                         style="display:none;"></div>
                    <span class="text-danger" id="empresaError"></span>
                    @Html.ValidationMessageFor(model => model.EmpresaID, "", new { @class = "text-danger" })
                </div>
            }
        </div>

        <input type="hidden" name="jornadaId" value="@ViewBag.JornadaId" />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Crear" class="btn btn-default btnGuardar" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/empresa-autocomplete.js"></script>
    <link rel="stylesheet" href="~/Content/empresa-autocomplete.css" />
    <script>
        $(function () {
            // Inicialización unificada y parametrizada del autocompletado de empresas
            var autoCompleteOptions = {
                inputId: "filtroEmpresa",
                hiddenId: "EmpresaID",
                sugerenciasId: "sugerencias-empresas",
                urlAutocomplete: '@Url.Action("AutocompleteEmpresa", "Empresas")',
                placeholder: "Buscar empresa por nombre, RUT o razón social...",
                mensajeNoEncontrada: "No se encontraron empresas",
                showClearIcon: true,
                minLength: 3,
                enableTooltips: true,
                onClear: function() {
                    $('#empresaError').text('Debe seleccionar una empresa válida de la lista.');
                },
                onSelect: function() {
                    $('#empresaError').text('');
                }
            };
            
            // Si hay una empresa preseleccionada por error de validación
            @if (ViewBag.EmpresaSeleccionada != null)
            {
                <text>
                // Establecer la empresa preseleccionada
                autoCompleteOptions.valorInicial = {
                    id: @ViewBag.EmpresaSeleccionada.EmpresaID,
                    text: "@ViewBag.EmpresaSeleccionada.NombreFantasia"
                };
                </text>
            }
            
            initEmpresaAutocomplete(autoCompleteOptions);

            // Guardar con validación de documento repetido y empresa seleccionada
            $('.btnGuardar').on('click', function (e) {
                var documento = $('#Documento').val();
                var tipoDocumentoID = $('#TipoDocumentoID').val();
                var empresaID = $('#EmpresaID').val();
                
                // Validar que se haya seleccionado una empresa
                if (!empresaID || empresaID === "0" || empresaID === "") {
                    $('#empresaError').text('Debe seleccionar una empresa válida de la lista.');
                    return false;
                } else {
                    $('#empresaError').text('');
                }

                // solo se controlan la CI
                if (tipoDocumentoID == 1) {
                    $.ajax({
                        url: '/Capacitados/ExisteCapacitadoDocumento',
                        type: 'post',
                        data: {
                            documento: documento,
                            tipoDocumentoID: tipoDocumentoID
                        },
                        success: function (existeCapacitado) {
                            if (!existeCapacitado) {
                                $("#formCapacitado")[0].submit();
                            }
                            else {
                                alert('El capacitado con documento ' + documento + ' ya existe en la base de datos.');
                            }
                        }
                    });
                }
                else {
                    $("#formCapacitado")[0].submit();
                }
            });
        });

        function validarDocumentoRepetido() {
            var documento = $('#Documento').val();
            $.ajax({
                url: '/Capacitados/ObtenerCapacitadoIDPorDocumento',
                type: "GET",
                dataType: "JSON",
                data: { documento: documento },
                success: function (capacitadoId) {
                    if (capacitadoId != -1) {
                        $('#DocumentoRepetido').attr('href', '/Capacitados/Details/' + capacitadoId);
                        $('#DocumentoRepetido').show();
                    }
                    else {
                        $('#DocumentoRepetido').attr('href', '#');
                        $('#DocumentoRepetido').hide();
                    }
                }
            });
        }
    </script>
}