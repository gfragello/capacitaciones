@model IEnumerable<Cursos.Models.RegistroCapacitacion>
@using Cursos.Models.Enums;
@using Cursos.Helpers;

@{ 
    bool requiereDocumentacionAdicionalInscripcion = false;
    bool edicionDocumentacionAdicionalInscripcionPermitida = false;
    bool visualizacionDocumentacionAdicionalInscripcionPermitida = false;

    if (Model.Count() > 0)
    {
        requiereDocumentacionAdicionalInscripcion = Model.ElementAt(0).Jornada.Curso.RequiereDocumentacionAdicionalInscripcion;
        edicionDocumentacionAdicionalInscripcionPermitida = Model.ElementAt(0).EdicionDocumentacionAdicionalInscripcionPermitida;
        visualizacionDocumentacionAdicionalInscripcionPermitida = Model.ElementAt(0).VisualizacionDocumentacionAdicionalInscripcionPermitida;
    }
}

<table class="table table-striped">
    <tr>
        <th><!--Número de línea--></th>
        <th>
            @Html.DisplayNameFor(model => model.Capacitado.Documento)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Capacitado.Nombre)
        </th>
        @if (requiereDocumentacionAdicionalInscripcion && 
            (edicionDocumentacionAdicionalInscripcionPermitida || visualizacionDocumentacionAdicionalInscripcionPermitida))
        {
            <th>
                Documentación
            </th>
        }
        <th>
            @Html.DisplayNameFor(model => model.Capacitado.Empresa)
        </th>
        @if (User.IsInRole("InscripcionesExternas"))
        {
            <th> 
                &nbsp; <!-- Header vacío para la foto -->
            </th>
        }
        else
        {
            <th>
                @Html.DisplayNameFor(model => model.Nota)
            </th>
        }
        <th>
            @Html.DisplayNameFor(model => model.Estado)
        </th>
        @if (!User.IsInRole("InscripcionesExternas"))
        {
            <th>
                @Html.DisplayNameFor(model => model.EnvioOVALEstado)
            </th>
        }
        <th></th>
    </tr>

    @{ int numeroLinea = 1; }

    @foreach (var item in Model)
    {
        string labelClass = EstadosRegistroCapacitacionHelper.GetInstance().ObtenerLabelClassEstado(item.Estado);

        <tr>

            <td>
                @string.Format("{0}.", numeroLinea++.ToString().PadLeft(2, '0'))
            </td>

        @if (item.EdicionDatosCapacitadoPermitida)
        {
            <td>
                @if (User.IsInRole("Administrador"))
                {
                    <a href="#" onclick="abrirModalCapacitado(@item.CapacitadoID)">@Html.DisplayFor(modelItem => item.Capacitado.DocumentoCompleto)</a>
                }
                else
                {
                    @Html.DisplayFor(modelItem => item.Capacitado.DocumentoCompleto)
                }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Capacitado.NombreCompleto)
            </td>
            if (requiereDocumentacionAdicionalInscripcion)
            {
                if (edicionDocumentacionAdicionalInscripcionPermitida)
                {
                    <td>
                        @{ string bgcolor = !string.IsNullOrEmpty(item.DocumentacionAdicionalDatos) ? "#DCF9AF" : "#F9C1AF"; }
                        <input id="@string.Format("txtDocumentacionAdicionalDatos_{0}", item.RegistroCapacitacionID.ToString().Trim())" type="text" value="@item.DocumentacionAdicionalDatos" size="4" class="txtDocumentacionAdicionalDatos" data-registrocapacitacionid="@item.RegistroCapacitacionID.ToString()" style="background-color:@bgcolor;" />

                        <input id="@string.Format("txtDocumentacionAdicionalDatosAnteriores_{0}", item.RegistroCapacitacionID.ToString().Trim())" type="hidden" value="@item.DocumentacionAdicionalDatos" />
                    </td>
                }
                else if (visualizacionDocumentacionAdicionalInscripcionPermitida)
                {
                    <td>
                        @item.DocumentacionAdicionalDatos
                    </td>
                    }
                }
            <td>
                @Html.DisplayFor(modelItem => item.Capacitado.Empresa.NombreCompleto)
            </td>
            if (User.IsInRole("InscripcionesExternas"))
            {
                if (item.EdicionDatosCapacitadoPermitida)
                {
                    <th>
                        @if (item.Capacitado.PathArchivo != null)
                        {
                            <img src="~/images/FotosCapacitados/@item.Capacitado.PathArchivo.PathCompleto?width=75&height=75&mode=crop&anchor=top" alt="" />
                        }
                        else
                        {
                            <img src="~/images/sinfoto_75x75.png" />
                        }
                    </th>
                }
                else
                {
                    <th>&nbsp;</th>
                }
            }
            else
            {
                <td>
                    @Html.DisplayFor(modelItem => item.Nota)
                </td>
            }
            <td>
                <span class="label @labelClass">@item.Estado</span>
            </td>
            if (!User.IsInRole("InscripcionesExternas"))
            {
                <td style="text-align:center">
                    @Html.Raw(RegistroCapacitacionHelper.GetInstance().ObtenerImagenEnvioOVALEstado(item))
                </td>
            }
            <td>
                @if (item.Jornada.PuedeModificarse())
                {
                    <a href="@Url.Action("Edit", "RegistrosCapacitacion", new { id = item.RegistroCapacitacionID }) "><img src="@Url.Content("~/images/editar_16x16.png")" title="Editar" /></a>@:&nbsp;|
                }
                @if (item.EdicionDatosCapacitadoPermitida)
                {
                    <a href="@Url.Action("Edit", "Capacitados", new { id = item.CapacitadoID }) "><img src="@Url.Content("~/images/capacitados_16x16.png")" title="Editar Datos Capacitados" /></a>@:&nbsp;|
                }
                @if (item.Jornada.PuedeEliminarInscripcionesUsuarioActual)
                {
                    switch (item.TipoEliminacionPermitida)
                    {
                        case TipoEliminacionEnum.EliminacionSimple:
                            <a href="javascript:if (confirm('¿Confirma eliminación del inscripto?')) eliminarRegistroCapacitacion(@item.RegistroCapacitacionID);"><img src="@Url.Content("~/images/borrar_16x16.png")" title="Borrar" /></a>
                            break;

                        case TipoEliminacionEnum.EliminacionConRevision:
                            <a href="@Url.Action("Delete", "RegistrosCapacitacion", new { id = item.RegistroCapacitacionID }) "><img src="@Url.Content("~/images/borrar_16x16.png")" title="Borrar" /></a>
                            break;
                    }
                }
                &nbsp;
            </td>
            }
            else //los usuarios que no pueden editar los datos del capacitado tampoco pueden ser sus datos
            {
                <td colspan="6"><span class="label label-primary">Ocupado por otra empresa</span></td>
            }
        </tr>
    }
</table>