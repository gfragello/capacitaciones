@model Cursos.Models.Jornada

@{
    ViewBag.Title = "Create";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Jornada - Crear</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Fecha, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Fecha, "{0:dd/MM/yyyy}", new { @class = "form-control jqueryui-marker-datepicker" })
                @*@Html.EditorFor(model => model.Fecha, new { htmlAttributes = new { @class = "form-control" } }) *@
                @Html.ValidationMessageFor(model => model.Fecha, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Hora, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Hora, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Hora, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CursoId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CursoId", null, "Seleccione el curso...", htmlAttributes: new { @class = "form-control", @onchange = "cargarDatosPlantillaJornada();" })
                @Html.ValidationMessageFor(model => model.CursoId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LugarID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("LugarID", null, "Seleccionar el lugar...", htmlAttributes: new { @class = "form-control", @onchange = "cargarDireccionLugar();" })
                @Html.ValidationMessageFor(model => model.LugarID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Direccion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Direccion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Direccion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.InstructorId, htmlAttributes: new { @class = "control-label col-md-2" })
            @if (User.IsInRole("InstructorExterno"))
            {
                <label class="control-label col-md-2" style="text-align: left;">@ViewBag.InstructorNombreCompleto</label>
                <input type="hidden" id="InstructorID" name="InstructorID" value="@ViewBag.InstructorId" />
            }
            else
            {
                <div class="col-md-10">
                    @Html.DropDownList("InstructorId", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.InstructorId, "", new { @class = "text-danger" })
                </div>
            }                    
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Caracteristicas, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Caracteristicas, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Caracteristicas, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CuposDisponibles , htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.CuposDisponibles)
                    @Html.ValidationMessageFor(model => model.CuposDisponibles, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TieneMinimoAsistentes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.TieneMinimoAsistentes, new { htmlAttributes = new { @onclick = "toggleMinimoAsistentes();" } })
                    @Html.ValidationMessageFor(model => model.TieneMinimoAsistentes, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group" id="grpMinimoAsistentes" style="display:none;">
            @Html.LabelFor(model => model.MinimoAsistentes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MinimoAsistentes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MinimoAsistentes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TieneMaximoAsistentes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.TieneMaximoAsistentes, new { htmlAttributes = new { @onclick = "toggleMaximoAsistentes();" } })
                    @Html.ValidationMessageFor(model => model.TieneMaximoAsistentes, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group" id="grpMaximoAsistentes" style="display:none;">
            @Html.LabelFor(model => model.MaximoAsistentes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MaximoAsistentes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MaximoAsistentes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TieneCierreIncripcion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.TieneCierreIncripcion, new { htmlAttributes = new { @onclick = "toggleHorasCierreInscripcion();" } })
                    @Html.ValidationMessageFor(model => model.TieneCierreIncripcion, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group" id="grpHorasCierreInscripcion" style="display:none;">
            @Html.LabelFor(model => model.HorasCierreInscripcion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.HorasCierreInscripcion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.HorasCierreInscripcion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PermiteInscripcionesExternas, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.PermiteInscripcionesExternas)
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PermiteEnviosOVAL, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.PermiteEnviosOVAL)
                </div>
            </div>
        </div>

        <input type="hidden" name="JornadaTemplateId" value="@ViewBag.JornadaTemplateId" />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Crear" class="btn btn-default" />
            </div>
        </div>
    </div>

    if (ViewBag.CapacitadosTemplate != null)
    {
        <hr />

        <h4>Se incluirán en la Jornada los siguientes capacitados</h4>

        <table class="table table-striped">
            <tr>
                <th>
                    @Html.DisplayName("Capacitado")
                </th>
                <td></td>
                <th>
                    @Html.DisplayName("Empresa")
                </th>
            </tr>

            @foreach (var item in ViewBag.CapacitadosTemplate)
            {
                <tr>
                    <td>
                        @item.DocumentoCompleto
                    </td>
                    <td>
                        @item.NombreCompleto
                    </td>
                    <td>
                        @item.Empresa.NombreFantasia
                    </td>
                </tr>
            }

        </table>
    }
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

<script>

    function cargarDireccionLugar()
    {
        var lugarId = $('#LugarID').val();
        $.ajax({
            url: '/Lugares/ObtenerDireccionHabitual',
            type: "GET",
            dataType: "JSON",
            data: { LugarId: lugarId},
            success: function (DireccionHabitual)
                     {
                        $('#Direccion').val(DireccionHabitual);
                     }
        });
    }

    function toggleMinimoAsistentes() {
        $("#grpMinimoAsistentes").toggle();

        if (!$("#TieneMinimoAsistentes").is(":checked")) {
            //si se desmarca el checkbox y se ocultan el campo, 
            //se setea 0 como valor por defecto para prevenir que los validadores lo indiquen como un error
            $("#MinimoAsistentes").val("0");
        }
    }

    function toggleMaximoAsistentes() {
        $("#grpMaximoAsistentes").toggle();

        if (!$("#TieneMaximoAsistentes").is(":checked")) {
            //si se desmarca el checkbox y se ocultan el campo, 
            //se setea 0 como valor por defecto para prevenir que los validadores lo indiquen como un error
            $("#MaximoAsistentes").val("0");
        }
    }

    function toggleHorasCierreInscripcion() {
        $("#grpHorasCierreInscripcion").toggle();

        if (!$("#TieneCierreIncripcion").is(":checked")) {
            //si se desmarca el checkbox y se ocultan el campo, 
            //se setea 0 como valor por defecto para prevenir que los validadores lo indiquen como un error
            $("#HorasCierreInscripcion").val("0");
        }
    }

    function cargarDatosPlantillaJornada() {
        var cursoId = $('#CursoId').val();
        $.ajax({
            url: '/Cursos/ObtenerDatosPlantillaJornada',
            type: "GET",
            dataType: "JSON",
            data: { CursoId: cursoId },
            success: function (datosPlantillaJornada)
            {
                $("#TieneMinimoAsistentes").prop("checked", datosPlantillaJornada.TieneMinimoAsistentes);

                if (datosPlantillaJornada.TieneMinimoAsistentes) {
                    $("#grpMinimoAsistentes").show();
                    $("#MinimoAsistentes").val(datosPlantillaJornada.MinimoAsistentes);
                }
                else
                {
                    $("#grpMinimoAsistentes").hide();
                    $("#MinimoAsistentes").val("0");
                }

                $("#TieneMaximoAsistentes").prop("checked", datosPlantillaJornada.TieneMaximoAsistentes);

                if (datosPlantillaJornada.TieneMaximoAsistentes) {
                    $("#grpMaximoAsistentes").show();
                    $("#MaximoAsistentes").val(datosPlantillaJornada.MaximoAsistentes);
                }
                else {
                    $("#grpMaximoAsistentes").hide();
                    $("#MaximoAsistentes").val("0");
                }

                $("#TieneCierreIncripcion").prop("checked", datosPlantillaJornada.TieneCierreIncripcion);

                if (datosPlantillaJornada.TieneCierreIncripcion) {
                    $("#grpHorasCierreInscripcion").show();
                    $("#HorasCierreInscripcion").val(datosPlantillaJornada.HorasCierreInscripcion);
                }
                else {
                    $("#grpHorasCierreInscripcion").hide();
                    $("#HorasCierreInscripcion").val("0");
                }

                $("#PermiteInscripcionesExternas").prop("checked", datosPlantillaJornada.PermiteInscripcionesExternas);

                $("#PermiteEnviosOVAL").prop("checked", datosPlantillaJornada.PermiteEnviosOVAL);
            }
        });
    }

</script>
}
